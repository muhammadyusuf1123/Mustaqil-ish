# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xzcLT8Bykp36_PjrYvhs-Ds-Um6F5D7D
"""

# -*- coding: utf-8 -*-
"""Untitled8.ipynb
Automatically generated by Colab.
Original file is located at
    https://colab.research.google.com/drive/1Sv56awkHi_sHG7dXsbHhkmiYUbZbUU15
"""

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.animation import FuncAnimation
from IPython.display import HTML

# 3D kubning nuqtalari va qirralarini yaratish
def generate_cube():
    r = [-1, 1]
    vertices = np.array([[x, y, z] for x in r for y in r for z in r])
    edges = [
        (0, 1), (0, 2), (0, 4), (1, 3), (1, 5), (2, 3),
        (2, 6), (3, 7), (4, 5), (4, 6), (5, 7), (6, 7)
    ]
    return vertices, edges

# Aylanish funksiyasi
def rotate(vertices, angle):
    rotation_matrix = np.array([
        [np.cos(angle), -np.sin(angle), 0],
        [np.sin(angle), np.cos(angle),  0],
        [0,             0,              1]
    ])
    return vertices.dot(rotation_matrix)

# Yangilash funksiyasi
def update(frame, vertices, edges, lines):
    angle = frame * 0.1
    rotated_vertices = rotate(vertices, angle)
    for i, edge in enumerate(edges):
        x = [rotated_vertices[edge[0]][0], rotated_vertices[edge[1]][0]]
        y = [rotated_vertices[edge[0]][1], rotated_vertices[edge[1]][1]]
        z = [rotated_vertices[edge[0]][2], rotated_vertices[edge[1]][2]]
        lines[i].set_data(x, y)
        lines[i].set_3d_properties(z)
    return lines

# Asosiy kod
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.set_xlim(-2, 2)
ax.set_ylim(-2, 2)
ax.set_zlim(-2, 2)

vertices, edges = generate_cube()
lines = [ax.plot([], [], [], color='blue')[0] for _ in edges]

ani = FuncAnimation(fig, update, frames=100, fargs=(vertices, edges, lines), interval=50)

# Animatsiyani Colab-da ko'rsatish
HTML(ani.to_jshtml())